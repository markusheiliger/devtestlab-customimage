name: Build Images

env:
  resourceGroup: images
  galleryName: gallery
  location: westeurope

defaults:
  run:
    shell: bash

concurrency: ${{ github.ref }}

on:
  push:
    branches: [ main ]

jobs:

  prepare:
    runs-on: ubuntu-latest

    outputs:
        matrix: ${{ steps.packer-definitions.outputs.matrix }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Azure Resources
        id: azure-resources
        run: |
          RESULT=$(az deployment sub create --name ${{ github.sha }} --location ${{ env.location }} --template-file ./arm/azuredeploy.json --parameters resourceGroup=${{ env.resourceGroup }} galleryName=${{ env.galleryName }} location=${{ env.location }} -o json)
          echo "::set-output name=resourceGroup::$(echo "$RESULT" | jq --raw-output '.properties.outputs.resourceGroup.value')"
          echo "::set-output name=galleryName::$(echo "$RESULT" | jq --raw-output '.properties.outputs.galleryName.value')"

      - name: Detect Packer Definitions
        id: packer-definitions
        run: | 

          IMAGES=()
        
          while read IMAGE; do

            IMAGEFOLDER="$(dirname "$IMAGE")"
            IMAGENAME="$(basename "$IMAGEFOLDER")"
            IMAGEVERSION="$(cat "$IMAGE" | jq --raw-output '.version')"
            
            if [[ -z "$IMAGEVERSION" ]]; then
            
              echo "::warning::Skipping $IMAGE because of missing version information"
            
            elif [[ -z "$(az sig image-version list --gallery-image-definition $IMAGENAME --gallery-name ${{ steps.azure-resources.outputs.galleryName }} --resource-group ${{ steps.azure-resources.outputs.resourceGroup }} --query "[?name == '$IMAGEVERSION'] | [0]")" ]]; then

              echo "Detected image $IMAGE (new version)"
              IMAGES+=("$IMAGE")

            else

              while read IMAGEFILTER; do
                readarray -d '' FORCEPATTERNS < <(find . -type f -path "./images/$IMAGEFILTER/packer.json" -print0)
                echo "Eval force filter '$IMAGEFILTER' on image '$IMAGE'"; printf '%s\n' "${FORCEPATTERNS[@]}"
                if [[ "${FORCEPATTERNS[@]}" == "$IMAGE" ]]; then
                  echo "Detected force update of image '$IMAGE'"
                  IMAGES+=("$IMAGE")
                  break
                fi
              done < <(echo "${{ github.event.head_commit.message }}" | grep -Po '(?<=force\:)\S+')

            fi

          done < <(find . -type f -path './images/*/packer.json')

          if [ ${#IMAGES[@]} -eq 0 ]; then
              echo "No images to build"
              echo "::set-output name=matrix::[]"
          else
              echo "Images to build:"; printf '%s\n' "${IMAGES[@]}"
              echo "::set-output name=matrix::$(printf '%s\n' "${IMAGES[@]}" | jq -R -s -c 'split("\n")[:-1]')"
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
        matrix:
            imagePath: ${{ fromJson(needs.prepare.outputs.matrix) }}

    # this is needed to avoid workflow errors in case of an empty matrix
    if: ${{ fromJSON( needs.prepare.outputs.matrix ).include[0] }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1.0.0

      - name: Ensure Image
        continue-on-error: true 
        run: |

          # create image definition in gallery - this will fail if already exists 
          az sig image-definition create \
            --resource-group "${{ needs.prepare.outputs.resourceGroup }}" \
            --gallery-name "${{ needs.prepare.outputs.galleryName }}" \
            --gallery-image-definition "$(basename "$(dirname "${{ matrix.imagePath }}")")" \
            --publisher "${{ github.repository_owner }}" \
            --offer "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_offer')" \
            --sku "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_sku')" \
            --os-type "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .os_type')" \
            --only-show-errors \
            --output none

      - name: Build Image      
        run: |

          IMAGEFOLDER="$(dirname ${{ matrix.imagePath }})"
          IMAGENAME="$(basename "$IMAGEFOLDER")"
          IMAGEVERSION="$(cat ${{ matrix.imagePath }} | jq --raw-output '.version')"
          SUBSCRIPTION="$(az account show --query 'id' -o tsv)"

          # strip out version information - this key is not supported by packer
          cat <<< $(jq 'del(.version)' ${{ matrix.imagePath }}) > ${{ matrix.imagePath }}
          
          # switch to image folder to enable relative paths and run packer
          cd $IMAGEFOLDER; packer build -force \
            -var "image=$IMAGENAME" \
            -var "version=$IMAGEVERSION" \ 
            -var "location=${{ env.location }}" \
            -var "subscription=$SUBSCRIPTION" \
            -var "resourceGroup=$RESOURCEGROUP" \
            -var "galleryName=$GALLERYNAME" \
            -var "branch=${{ github.head_ref }}" \
            -var "commit=${{ github.sha }}" \
            "$(basename "${{ matrix.imagePath }}")" 

