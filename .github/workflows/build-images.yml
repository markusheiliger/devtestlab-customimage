name: Build Images

env:
  resourceGroup: images
  galleryName: gallery
  location: westeurope

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    # paths:
    #       - '**/packer.json'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  prepare:
    runs-on: ubuntu-latest

    outputs:
        matrix: ${{ steps.packer-definitions.outputs.matrix }}
        images: ${{ steps.image-folders.outputs.images }}
        resourceGroup: ${{ steps.azure-resources.outputs.resourceGroup }}
        galleryName: ${{ steps.azure-resources.outputs.galleryName }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Azure Resources
        id: azure-resources
        run: |
          RESULT=$(az deployment sub create --location ${{ env.location }} --template-file ./arm/azuredeploy.json --parameters resourceGroup=${{ env.resourceGroup }} galleryName=${{ env.galleryName }} location=${{ env.location }} -o json)
          echo "::set-output name=resourceGroup::$(echo "$RESULT" | jq --raw-output '.properties.outputs.resourceGroup.value')"
          echo "::set-output name=galleryName::$(echo "$RESULT" | jq --raw-output '.properties.outputs.galleryName.value')"

      - name: Detect Packer Definitions
        id: packer-definitions
        run: | 
          echo "::set-output name=matrix::$(find . -type f -name 'packer.json' | jq -R -s -c 'split("\n")[:-1]')"

      - name: Detect Image Folders
        id: image-folders
        run: | 
          echo "::set-output name=images::$(find . -type f -name 'packer.json' | sed -r 's|/[^/]+$||' | sort -u )"

  changes:
    needs: prepare
    runs-on: ubuntu-latest

    outputs:
      images: ${{ steps.filter.outputs.changes }}

    steps:
      - uses: actions/checkout@v2

      - name: Detect Image Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: ${{ needs.prepare.outputs.images }}


  build:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
        matrix:
            imagePath: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: Unshallow Repository
        run: |
          git fetch --unshallow --update-head-ok origin '+refs/heads/*:refs/heads/*'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        id:   gitversion
        with:
          useConfigFile: true

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1.0.0

      - name: Prepare Image
        continue-on-error: true
        run: |
          IMAGE="$(basename "$(dirname "${{ matrix.imagePath }}")")"
          IMAGEOFFER="$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_offer')"
          IMAGESKU="$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_sku')"
          RESOURCEGROUP="${{ needs.prepare.outputs.resourceGroup }}"
          GALLERYNAME="${{ needs.prepare.outputs.galleryName }}"
          OSTYPE="$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .os_type')"
          az sig image-definition create -g $RESOURCEGROUP --gallery-name $GALLERYNAME --gallery-image-definition $IMAGE --publisher ${{ github.repository_owner }} --offer $IMAGEOFFER --sku $IMAGESKU --os-type $OSTYPE --only-show-errors -o none

      - name: Build Image      
        run: |
          FOLDER="$(dirname "${{ matrix.imagePath }}")"
          IMAGE="$(basename "$FOLDER")"
          SUBSCRIPTION="$(az account show --query 'id' -o tsv)"
          RESOURCEGROUP="${{ needs.prepare.outputs.resourceGroup }}"
          GALLERYNAME="${{ needs.prepare.outputs.galleryName }}"
          cd $FOLDER; packer build -force -var "image=$IMAGE" -var "version=${{ steps.gitversion.outputs.MajorMinorPatch }}" -var "location=${{ env.location }}" -var "subscription=$SUBSCRIPTION" -var "resourceGroup=$RESOURCEGROUP" -var "galleryName=$GALLERYNAME" "$(basename "${{ matrix.imagePath }}")" 
