name: Build Images

env:
  resourceGroup: images
  galleryName: gallery
  location: westeurope

defaults:
  run:
    shell: bash

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    # paths:
    #       - '**/packer.json'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  prepare:
    runs-on: ubuntu-latest

    outputs:
        matrix: ${{ steps.packer-definitions.outputs.matrix }}
        resourceGroup: ${{ steps.azure-resources.outputs.resourceGroup }}
        galleryName: ${{ steps.azure-resources.outputs.galleryName }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Azure Resources
        id: azure-resources
        run: |
          RESULT=$(az deployment sub create --location ${{ env.location }} --template-file ./arm/azuredeploy.json --parameters resourceGroup=${{ env.resourceGroup }} galleryName=${{ env.galleryName }} location=${{ env.location }} -o json)
          echo "::set-output name=resourceGroup::$(echo "$RESULT" | jq --raw-output '.properties.outputs.resourceGroup.value')"
          echo "::set-output name=galleryName::$(echo "$RESULT" | jq --raw-output '.properties.outputs.galleryName.value')"

      - name: Detect Packer Definitions
        id: packer-definitions
        run: | 
          echo "::set-output name=matrix::$(find . -type f -name 'packer.json' | jq -R -s -c 'split("\n")[:-1]')"

  build:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
        matrix:
            imagePath: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1.0.0

      - name: Ensure Image
        continue-on-error: true 
        run: |

          # create image definition in gallery - this will fail if already exists 
          az sig image-definition create \
            --resource-group "${{ needs.prepare.outputs.resourceGroup }}" \
            --gallery-name "${{ needs.prepare.outputs.galleryName }}" \
            --gallery-image-definition "$(basename "$(dirname "${{ matrix.imagePath }}")")" \
            --publisher "${{ github.repository_owner }}" \
            --offer "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_offer')" \
            --sku "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .image_sku')" \
            --os-type "$(cat ${{ matrix.imagePath }} | jq --raw-output '.builders[] | select(.type == "azure-arm") | .os_type')" \
            --only-show-errors \
            --output none

      - name: Build Image      
        run: |

          IMAGEFOLDER="$(dirname ${{ matrix.imagePath }})"
          IMAGENAME="$(basename "$IMAGEFOLDER")"
          IMAGEVERSION="$(cat ${{ matrix.imagePath }} | jq --raw-output '.version')"
          SUBSCRIPTION="$(az account show --query 'id' -o tsv)"
          RESOURCEGROUP="${{ needs.prepare.outputs.resourceGroup }}"
          GALLERYNAME="${{ needs.prepare.outputs.galleryName }}"
          FORCEBUILD="false"

          while read IMAGEFILTER; do
            echo "Eval force filter $IMAGEFILTER on image name $IMAGENAME ..."
            if [[ ! -z "$IMAGEFILTER" ]] && [[ $IMAGENAME == $IMAGEFILTER ]]; then 
              FORCEBUILD="true"
              break
            fi
          done < <(echo "${{ github.event.head_commit.message }}" | grep -Po '(?<=force\:)\S+')

          if [[ "$FORCEBUILD" == "true"]] || [[ -z "$(az sig image-version list --gallery-image-definition $IMAGENAME --gallery-name $GALLERYNAME --resource-group $RESOURCEGROUP --query "[?name == '$IMAGEVERSION'] | [0]")" ]]; then
          
            # strip out version information - this key is not supported by packer
            cat <<< $(jq 'del(.version)' ${{ matrix.imagePath }}) > ${{ matrix.imagePath }}
            
            # switch to image folder to enable relative paths and run packer
            cd $IMAGEFOLDER; packer build -force \
              -var "image=$IMAGENAME" \
              -var "version=$IMAGEVERSION" \ 
              -var "location=${{ env.location }}" \
              -var "subscription=$SUBSCRIPTION" \
              -var "resourceGroup=$RESOURCEGROUP" \
              -var "galleryName=$GALLERYNAME" \
              -var "branch=${{ github.head_ref }}" \
              -var "commit=${{ github.sha }}" \
              "$(basename "${{ matrix.imagePath }}")" 

          else

            # the image version already exists - we are not going to replace it
            echo "::error::Version $IMAGEVERSION of image $IMAGENAME already exists"

          fi

